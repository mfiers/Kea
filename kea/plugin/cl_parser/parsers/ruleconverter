#!/usr/bin/env python

from collections import OrderedDict
import os
import re
import shlex
import sys
import textwrap

meta = {}
unames = []


def trim_leading_space(rules):
    if len(rules) > 0:
        while not rules[0].strip():
            rules.pop(0)


def extract_candidate_name(inp):
    strip_nonalpha = re.compile('\W')
    ls = inp.split()
    rv = []
    for i in ls:
        i = strip_nonalpha.sub("", i)
        if i.lower() in "the for is of print".split():
            continue
        rv.append(i)
    return rv[0]
    # if len(rv) >= 1:
    #     return "_".join(rv[:2]).lower()
    # else:
    #     return "_".join(inp[:2]).lower()


def unique_name(name):
    global unames
    if not name in unames:
        unames.append(name)
        return name

    i = 0
    while '{}_{:02d}'.format(name, i) in unames:
        i += 1
    
    nname = '{}_{:02d}'.format(name, i)
    unames.append(nname)
    return nname




def ruleparser(filename):
    with open(filename) as F:
        rules = F.readlines()

    # trim leading empty lines
    trim_leading_space(rules)

    # find corerules
    core = []
    while rules[0].strip():
        core.append(rules.pop(0))

    yield(core)

    trim_leading_space(rules)

    while True:
        block = []
        while rules[0].strip():
            block.append(rules.pop(0))
            if len(rules) == 0:
                break
        if len(block) > 0:
            btype = block[0].split()[0]
            yield btype, block
            btype, block = None, []
            
        trim_leading_space(rules)

        if len(rules) == 0:
            break


def convert_core_element(e, first=False):
    if e[0] == '<' and e[-1] == '>':
        if not first:
            return "/\s+/ {}".format(e[1:-1])
        else:
            return e[1:-1]
    elif e[0] == '[' and e[-4:] == '...]':
        if first:
            return "{ " + e[1:-4] + "}"
        else:
            return "{ /\s+/ " + e[1:-4] + "}"
    elif e[0] == '[' and e[-1] == ']':
        if first:
            return "[ {}]".format(e[1:-1])
        else:
            return "[ /\s+/ {} ]".format(e[1:-1])
    elif (e[0] == '"' and e[-1] == '"') or (e[0] == "'" and e[-1] == "'"):
        if first:
            return e
        else:
            return '/\s+/ ' + e
    else:
        if first:
            return '"{}"'.format(e)
        else:
            return '/\s+/ "{}"'.format(e)


def convert_core_rule(rs):
    return " ".join([convert_core_element(x, i==0) for i, x in enumerate(rs)])


def convert_core(rules):
    out = OrderedDict()

    for r in rules:
        rs = r.split()
        name = unique_name(extract_candidate_name(r))
        out[name] = convert_core_rule(rs)

    rv = "start = \n  "
    rv += " | \n  ".join(out.keys())
    rv += ' ;\n\n'

    for n, v in out.items():
        to_append = "{} = {} $ ;\n\n".format(n, v)
        if len(to_append) > 80:
            to_append = "\n".join(
                textwrap.wrap(to_append, 80, 
                              subsequent_indent = '    ')) + "\n\n"
            
        rv += to_append

    return rv


def convert_options(options):
    obname = options.pop(0).split()[1]

    rv = "(* options *)\n{} = (\n  ".format(obname)

    letterflags = []

    ops = []
    for o in options:

        #separate option from keyvals
        if ' ||' in o:
            rawpat, rest = [x.strip() for x in o.split("||")]
        else:
            rawpat = o.strip()
            rest = ""

        keyvals = dict(x.split('=', 1) for x in shlex.split(rest))
        name = keyvals.get('name')

        #check if there is a name
        if name:
            meta[name] = dict(type='option', pattern=rawpat, **keyvals)
        
        #split multi-options (-s/--split)
        def option_pat_split(pat):
            s = pat.split()
            if '/' in s[0]:
                for ss in s[0].split('/'):
                    yield " ".join([ss] + s[1:])
            else:
                yield pat
                
        #dealing with -s/--skip type options::
        for pat in option_pat_split(rawpat):
            pats = pat.split()
            if len(pat) == 2 and pat[0] == '-':
                if name:
                    #change type to 'flag'
                    meta[name]['type'] = 'flag'
                    letterflags.append('{}+:"{}"'.format(name, pat[1]))
                else:
                    letterflags.append('"{}"'.format(pat[1]))
            else:
                pats = convert_core_rule(pat.split()).split()
                if name:
                    if len(pats) == 1:
                        ops.append("{}+:{}".format(name, pats[0]))
                    elif len(pats) == 3:
                        ops.append("{} {} {}+:{}".format(pats[0], pats[1], name, pats[2]))
                    else:
                        ops.append(" ".join(pats))
                else:
                    ops.append(" ".join(pats))
            
    ops = ["{}_flag".format(obname)] + ops
    
    rv += "\n  | ".join(ops)

    rv += "\n  ) ; \n\n"
    rv += "{}_flag = ".format(obname)
    rv += '"-" { ' + "{}".format("\n        | ".join(letterflags)) + " }+"
    rv += ";\n"

    return rv

def convert_files(fblock):
    global meta
    fblock.pop(0)
    rv = "\n(* files *)\n"

    for fitem in fblock:
        
        name, rest = [x.strip() for x in fitem.split('=', 1)]
        patend = rest.index('||')
        pattern = rest[:patend].strip().rstrip('#').strip()
        keyvals = dict(x.split('=', 1) for x in shlex.split(rest[patend+2:]))
              
        meta[name] = dict(type='file', 
                          pattern=pattern, **keyvals)

        rv += "{} = {}+:{} ; \n".format(name, name, pattern)

    return rv + "\n"


def convert_other(others):

    global meta
    others.pop(0) #remove 'others' line

    rv = "\n(* other *)\n"
    for fitem in others:

        name, rest = [x.strip() for x in fitem.split('=', 1)]
        if '||' in rest:
            patend = rest.index('||')
            pattern = rest[:patend].strip().rstrip('#').strip()
            keyvals = dict(x.split('=', 1) for x in shlex.split(rest[patend+2:]))
        else:
            pattern = rest
            keyvals = {}

        meta[name] = dict(type='other', 
                          pattern=pattern, **keyvals)
        
        rv += "{} = {}+:{} ; \n".format(name, name, pattern)

    return rv


parser = ruleparser(sys.argv[1])
core = parser.next()
rv = convert_core(core)
for btype, block in parser:
    if btype == 'options':
        rv += convert_options(block)
        rv += "\n"
    if btype == 'files':
        rv += convert_files(block)
        rv += "\n"

    if btype == 'other':
        rv += convert_other(block)
        rv += "\n"


rv +=  """
(* Misc *)
file = /\S+/ ;
path = file ; 
int = /[0-9]+/ ;
integer = int ;
float = /[0-9\.]+/ ;
string = ( /"[^"]*"/ | /'[^']*'/ | /\S+/ ) ;
str = string ;
"""

outfile = sys.argv[1].replace('rules', 'ebnf')
outfile_meta = sys.argv[1].replace('.rules', '_meta.py')
with open(outfile, 'w') as F:
    F.write(rv)

with open(outfile_meta, 'w') as F:
    F.write("meta = {}".format(str(meta)))
