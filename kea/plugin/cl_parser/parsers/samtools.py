#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser


__version__ = (2014, 12, 21, 14, 12, 22, 6)

__all__ = [
    'samtoolsParser',
    'samtoolsSemantics',
    'main'
]


class samtoolsParser(Parser):
    def __init__(self, whitespace='', nameguard=True, **kwargs):
        super(samtoolsParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _start_(self):
        with self._choice():
            with self._option():
                self._samtools_view_()
            with self._option():
                self._samtools_flagstat_()
            with self._option():
                self._samtools_index_()
            with self._option():
                self._samtools_merge_()
            with self._option():
                self._samtools_sort_()
            with self._option():
                self._samtools_view_00_()
            with self._option():
                self._samtools_()
            self._error('no available options')

    @graken()
    def _samtools_view_(self):
        self._token('samtools')
        self._pattern(r'\s+')
        self._token('view')

        def block0():
            self._pattern(r'\s+')
            self._viewoptions_()
        self._closure(block0)
        self._pattern(r'\s+')
        self._inputfile_()

        def block1():
            self._pattern(r'\s+')
            self._regions_()
        self._closure(block1)
        self._check_eof()

    @graken()
    def _samtools_flagstat_(self):
        self._token('samtools')
        self._pattern(r'\s+')
        self._token('flagstat')
        self._pattern(r'\s+')
        self._inputfile_()
        self._check_eof()

    @graken()
    def _samtools_index_(self):
        self._token('samtools')
        self._pattern(r'\s+')
        self._token('index')
        self._pattern(r'\s+')
        self._inputfile_()
        self._check_eof()

    @graken()
    def _samtools_merge_(self):
        self._token('samtools')
        self._pattern(r'\s+')
        self._token('merge')
        self._pattern(r'\s+')
        self._outputfile_()
        self._pattern(r'\s+')
        self._inputfile_()

        def block0():
            self._pattern(r'\s+')
            self._inputfile_()
        self._closure(block0)
        self._check_eof()

    @graken()
    def _samtools_sort_(self):
        self._token('samtools')
        self._pattern(r'\s+')
        self._token('sort')

        def block0():
            self._pattern(r'\s+')
            self._sortoptions_()
        self._closure(block0)
        self._pattern(r'\s+')
        self._inputfile_()
        self._pattern(r'\s+')
        self._outprefix_()
        self._check_eof()

    @graken()
    def _samtools_view_00_(self):
        self._token('samtools')
        self._pattern(r'\s+')
        self._token('view')
        self._check_eof()

    @graken()
    def _samtools_(self):
        self._token('samtools')
        self._check_eof()

    @graken()
    def _sortoptions_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._sortoptions_flag_()
                with self._option():
                    self._token('-l')
                    self._pattern(r'\s+')
                    self._int_()
                with self._option():
                    self._token('-@')
                    self._pattern(r'\s+')
                    self._int_()
                with self._option():
                    self._token('-m')
                    self._pattern(r'\s+')
                    self._string_()
                self._error('no available options')

    @graken()
    def _sortoptions_flag_(self):
        self._token('-')

        def block0():
            with self._choice():
                with self._option():
                    self._pattern(r'n')
                with self._option():
                    self._pattern(r'f')
                with self._option():
                    self._pattern(r'o')
                self._error('expecting one of: f n o')
        self._positive_closure(block0)

    @graken()
    def _viewoptions_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._viewoptions_flag_()
                with self._option():
                    self._token('-@')
                    self._pattern(r'\s+')
                    self._int_()
                with self._option():
                    self._token('-L')
                    self._pattern(r'\s+')
                    self._bedoverlap_()
                with self._option():
                    self._token('-t')
                    self._pattern(r'\s+')
                    self._file_()
                with self._option():
                    self._token('-T')
                    self._pattern(r'\s+')
                    self._file_()
                with self._option():
                    self._token('-o')
                    self._pattern(r'\s+')
                    self._file_()
                with self._option():
                    self._token('-R')
                    self._pattern(r'\s+')
                    self._file_()
                with self._option():
                    self._token('-f')
                    self._pattern(r'\s+')
                    self._int_()
                with self._option():
                    self._token('-F')
                    self._pattern(r'\s+')
                    self._int_()
                with self._option():
                    self._token('-q')
                    self._pattern(r'\s+')
                    self._int_()
                with self._option():
                    self._token('-l')
                    self._pattern(r'\s+')
                    self._string_()
                with self._option():
                    self._token('-r')
                    self._pattern(r'\s+')
                    self._string_()
                with self._option():
                    self._token('-s')
                    self._pattern(r'\s+')
                    self._float_()
                self._error('no available options')

    @graken()
    def _viewoptions_flag_(self):
        self._token('-')

        def block0():
            with self._choice():
                with self._option():
                    self._pattern(r'b')
                    self.ast.setlist('output_bam', self.last_node)
                with self._option():
                    self._pattern(r'h')
                with self._option():
                    self._pattern(r'H')
                with self._option():
                    self._pattern(r'S')
                with self._option():
                    self._pattern(r'u')
                with self._option():
                    self._pattern(r'1')
                with self._option():
                    self._pattern(r'x')
                with self._option():
                    self._pattern(r'X')
                with self._option():
                    self._pattern(r'c')
                with self._option():
                    self._pattern(r'B')
                with self._option():
                    self._pattern(r'\?')
                self._error('expecting one of: 1 B H S X \\? b c h u x')
        self._positive_closure(block0)

        self.ast._define(
            [],
            ['output_bam']
        )

    @graken()
    def _outputfile_(self):
        self._pattern(r'\S+\.bam')
        self.ast.setlist('outputfile', self.last_node)

        self.ast._define(
            [],
            ['outputfile']
        )

    @graken()
    def _inputfile_(self):
        self._pattern(r'\S+\.[bs]am')
        self.ast.setlist('inputfile', self.last_node)

        self.ast._define(
            [],
            ['inputfile']
        )

    @graken()
    def _bedoverlap_(self):
        self._pattern(r'\w+')
        self.ast.setlist('bedoverlap', self.last_node)

        self.ast._define(
            [],
            ['bedoverlap']
        )

    @graken()
    def _regions_(self):
        self._pattern(r'\S+')
        self.ast.setlist('regions', self.last_node)

        self.ast._define(
            [],
            ['regions']
        )

    @graken()
    def _outprefix_(self):
        self._pattern(r'\S+')
        self.ast.setlist('outprefix', self.last_node)

        self.ast._define(
            [],
            ['outprefix']
        )

    @graken()
    def _file_(self):
        self._pattern(r'\S+')

    @graken()
    def _int_(self):
        self._pattern(r'[0-9]+')

    @graken()
    def _float_(self):
        self._pattern(r'[0-9\.]+')

    @graken()
    def _string_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'"[^"]*"')
                with self._option():
                    self._pattern(r"'[^']*'")
                with self._option():
                    self._pattern(r'\S+')
                self._error('expecting one of: "[^"]*" \'[^\']*\' \\S+')


class samtoolsSemantics(object):
    def start(self, ast):
        return ast

    def samtools_view(self, ast):
        return ast

    def samtools_flagstat(self, ast):
        return ast

    def samtools_index(self, ast):
        return ast

    def samtools_merge(self, ast):
        return ast

    def samtools_sort(self, ast):
        return ast

    def samtools_view_00(self, ast):
        return ast

    def samtools(self, ast):
        return ast

    def sortoptions(self, ast):
        return ast

    def sortoptions_flag(self, ast):
        return ast

    def viewoptions(self, ast):
        return ast

    def viewoptions_flag(self, ast):
        return ast

    def outputfile(self, ast):
        return ast

    def inputfile(self, ast):
        return ast

    def bedoverlap(self, ast):
        return ast

    def regions(self, ast):
        return ast

    def outprefix(self, ast):
        return ast

    def file(self, ast):
        return ast

    def int(self, ast):
        return ast

    def float(self, ast):
        return ast

    def string(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None, nameguard=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = samtoolsParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in samtoolsParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for samtools.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-n', '--no-nameguard', action='store_true',
                        dest='no_nameguard',
                        help="disable the 'nameguard' feature")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(
        args.file,
        args.startrule,
        trace=args.trace,
        whitespace=args.whitespace,
        nameguard=not args.no_nameguard
    )

